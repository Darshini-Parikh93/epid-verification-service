// Copyright 2021 Intel Corporation
// SPDX-License-Identifier: Apache 2.0

package org.fidoalliance.fdo.epid.verification.services.proof;

import static javax.xml.bind.DatatypeConverter.parseHexBinary;

import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class SignatureVerificationStatusVerifierEpid20Test {

  private byte[] validSigrl =
      parseHexBinary(
          "0000000DDDDDCCCC00000000EEEEEE0100000002000000024F2F51541181381805F0FE664161A"
              + "8075332D29C54D80F6B73DD55C503937E695D973F09B17C8B2310F1F37EB4AEAA3A99701A5F"
              + "010BEE78479EF9D72269A88B13B586BE8849ECDD73C439CFCA83BC4CE4E77A30F17D9F00B64"
              + "C093694DE2913A154A301B889DA3B094709AA4B33F7272AD404A31A875B2D4B5B82709DD830"
              + "7F4F2F51541181381805F0FE664161A8075332D29C54D80F6B73DD55C503937E695D973F09B"
              + "17C8B2310F1F37EB4AEAA3A99701A5F010BEE78479EF9D72269A88B25A2C6A803A589670943"
              + "0866DE31BE7B9957744BA9DC7E4429AAE60EDE532D58BF5F529EFD224B7AA5651F97E5AA365"
              + "E05EF679D1586181E82889A307697191E");
  private byte[] validSignature =
      parseHexBinary(
          "4F2F51541181381805F0FE664161A8075332D29C54D80F6B73DD55C503937E695D973F09B17C8B"
              + "2310F1F37EB4AEAA3A99701A5F010BEE78479EF9D72269A88BD65756B42EC1639CBBEFEC94"
              + "16FC6DCB02D96E5C114B944A5F7B595E52975A921B66ECFF9CDF34E215F6C315D2C7DD74E5"
              + "E3746722505EE8D558E0328E3BFBBF0AD3FD3EDBDEC15C74ADA34F8670D4C52A4BDCD6CA72F"
              + "10E5C8B7398D8715F5285EC859FCD0B3D3D62E71BEDEF005F22B762EF486D87D28600DAF312"
              + "5311B4E9F2162B84F66959C111D4CBC1EDBE1E17EE99FE8FD9ABDB218363DD4CEA6505EE852"
              + "08ABD98E712292EC8EF007C05A896498C8626AF07185F7F43E74BBF047A800681BF5BFB58F6"
              + "18C1C97FE859DD81CB22FA5C9C6281048B3FE91F94079A4A176DF5F3F89AF2F19EFD2FFDAC0"
              + "1111DCC31B3E7E756315FD34303D3F287F988CC6377F39E7047FBE8E5BEA7F717C1DA1E5B2B"
              + "B054D82C19A0EF90560E298128BF0000000200000002C940976C859F03F93B94189A55F7FDB"
              + "BA9ABFA4BE07DB91AF41CDF8B87FEA161F22D8D8480999DAC6F0E411BBB21600081E075205F"
              + "ABC917F9796EBD8EED0CB371B0C5218FC9C706DCAB8C5B765333D477EF2445C8CCD54481889"
              + "7E1BE99D2C2148FEA3EF080752A1CC4733F55B92AFC0C52A886543FC7D8D64FDAA0687D3818"
              + "8006E316BD895AF808111E50FAF16655635747A540EABDEC3F64C65B6F395B7D50D69E49045"
              + "8CA9D70895FB501B13EFB676F793A8A29821F80C7DCC3152BD945F66C8601527460BF3323EA"
              + "FA2461079EF1421D9FDF53ACA3E44F63AF15579A33A7D9939E2E410887865642211110C1FEE"
              + "4643999D0B993AAC37B7953EDB3D66B47660A4EDBB84CF4556955C245282EFEE4D90D28741D"
              + "DE1DAE984FDF7EA99669D8013CE300E793162F7AB6AD2E561E58D653DF6904F96396B085F6E"
              + "F8CE898AA");
  private SignatureVerificationStatusVerifierEpid20 signatureVerificationStatusVerifierEpid20;

  @BeforeTest
  public void setUp() {
    signatureVerificationStatusVerifierEpid20 = new SignatureVerificationStatusVerifierEpid20();
  }

  @Test
  public void checkGetVersionFromSigrl() {
    Assert.assertEquals(
        signatureVerificationStatusVerifierEpid20.getSigrlVersion(validSigrl),
        new byte[] {0, 0, 0, 2});
  }

  @Test
  public void checkGetVersionFromSignature() {
    Assert.assertEquals(
        signatureVerificationStatusVerifierEpid20.getSignatureVersion(validSignature),
        new byte[] {0, 0, 0, 2});
  }
}
