// Copyright 2021 Intel Corporation
// SPDX-License-Identifier: Apache 2.0

package org.fidoalliance.fdo.epid.verification.services.proof;

import static javax.xml.bind.DatatypeConverter.parseHexBinary;

import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class SignatureVerificationStatusVerifierEpid11Test {

  private byte[] validSigrl =
      parseHexBinary(
          "FFFFFF000000000400000004571C39A43EDC902BA44D9B9DE39C85D0A0FE36B79BDB33E7489750"
              + "7286642BD1DB6AC4BEBD93993A92624C911A7F7E7C7064A2AD4055BAE5476AF2C9499B33BB784"
              + "4217B4E3579EA97B436C05C016F59D7489C8220AC81A3AF543381B5C7C096D17CEB5A87B98062"
              + "4E669A967B1FCFA7ABE634D9E2E029362B028851234AF1FE5E50EC1DF0468C857193EDE978DA9"
              + "F69173D8F05C8F63100D1FB892C1AF8C2001961EC9259FAC836F2589FA6F9AB04BC62BD59112C"
              + "5A0F2730B0A51D4CC59C208E3458A7377A12CA80B1DA429AC96277F92D858327D1975D3F3D66D"
              + "D5D3FFFE6D8BEA96F2DE5D19153639FB775447C5977A386DF424532BC5C08C40B5852A4A0C008"
              + "B08952F8E5B1DA2B4A8F38EA37FBE898CE518FEDA209A9E081286CFD61F282D2B4C134D7AE18D"
              + "79FB9D97C1D4BD79D0BCD66CE4F7F8C6AF34A842AD9C2B08517A4FC1C700E51B9F80AD37DCEC7"
              + "A667EC2407C39DF98B169955B2E83CE4DC13E84818B2256B6556942E88381B72512EA2C0CEFA7"
              + "FA6FC66641921DD717F9E802BEAAFACF404A103FC53D3A035E158E398BCB92E93EA3D745A2292"
              + "D057F9F46FC46EC54C34D0C4991FD2E7C2A350ED3DADD37C516FFBD588EEDE322351E8CF39505"
              + "36C24DB9842811D335BC416CCB924E3DA954D8C51004D0EE0F7F70D40B688646F2522D8817C9D"
              + "8FADB9A08607CB3F10BC454186C6B62C8A46AE790151AB");
  private byte[] validSignature =
      parseHexBinary(
          "0C0C0C0C04040404040404041010101008080808988414141C1C1C1C1010101070E569901EF3C2"
              + "039E49D1647404011DCF261651E6A35813EBF3306619B2418750B16C9231F218D4AE7A9147CF"
              + "811A075B0AE8399883EC35D181622410A8F5241BF70133A6AE54840296DBF6F7AA015B6FA708"
              + "EE86F6E4AA8FDD7FB1E3A62BF5012FF8EF27F5E7F6CCAB19EE3D6EF7A77A6FC6AEB48866101F"
              + "8CB9BA171736E300D47BF2148C29ABE09A0B5E3B3F235C667549760B1A3BCC7A80E31BBCF2B8"
              + "AD016BCE55B2B5C001672A93CCE4F758E78BDC7E406E887AB86A731950ADD0100E07E89D2597"
              + "24608F4925A9AB7F7B7331C2823051984F5A6D3E137EDE23B389B7733A6B7BBC79B63F4C47B3"
              + "F8D6FAA1783CAA1B86A54E3F401CD5B0CAD64827DB0404040404040404040400006F416AB646"
              + "C3F54C54CCC6FC792EDC534C6CB837D5E15C66A4CF66D0F09A00000D41F8DE7D38B0CC1143EE"
              + "1445CAF2C36F10FA1FF657BCB95866FCB80E5800040404040404040404040404047180FC1F60"
              + "44F0630406BD02C85DC445AF58BE49436BC61FFBEE6E982A5D7034EE116A65E8326D319E95FB"
              + "0E5C20457B2DC912F0EC5E5943543098D197000004E02C1D550E3E8F4ECF3FBD000B39345D07"
              + "19AA1E95BF72CAE9C1B2FFA9000004E02C1D550E3E8F4ECF3FBD000B39345D0719AA1E95BF72"
              + "CAE9C1B2FFA900004640BD300877B759E2FB1491CD0EF02A023554F06DC92961BDF250281252"
              + "00004640BD300877B759E2FB1491CD0EF02A023554F06DC92961BDF250281252000000020000"
              + "0002C60812AD12F0177BB42040F0953C83BEF141731C1DAF1919A01F8238DAD3A088A417D3BC"
              + "B4C3FEF0B905995BB7947B8E8BCF2F1B91287324AFB24F73EDF9A6630DC16B95514362EB407C"
              + "F2C5FFC7132CB0AFFAD88C490286AA812067647832D510BE36BD1D9F5CA94E342110911BB1C9"
              + "F056C82CF8A505E573336F03C5F00C3B14F759111114BE3BB50B558D44285EF32124EDA2B044"
              + "47A7EF6E198AC2840D8ABDB1064AC3543FD42D7E2ECCD09C19FCA1FBDCCAF5344445A10FFD1B"
              + "AE927217E33B96120473DFE7912C563B2BC6C363842A6E1D9C4837578133F1A2BE3F20DC4E7E"
              + "86660A9E64CF3015B382F07DC5835AD7669479F5EE33418C8DFBE42613EDD52668A2A080E9FF"
              + "4CAAD6005B1AA3BEC4210C5588F23D06640D02671F1E3A71EDBFA8B8C669B98E0ED1E81E603B"
              + "5EE8983B1667441BDE7A1232FC2061E1C3B8");
  private SignatureVerificationStatusVerifierEpid11 signatureVerificationStatusVerifierEpid11;

  @BeforeTest
  public void setUp() {
    signatureVerificationStatusVerifierEpid11 = new SignatureVerificationStatusVerifierEpid11();
  }

  @Test
  public void checkGetVersionFromSigrl() {
    Assert.assertEquals(
        signatureVerificationStatusVerifierEpid11.getSigrlVersion(validSigrl),
        new byte[] {0, 0, 0, 4});
  }

  @Test
  public void checkGetVersionFromSignature() {
    Assert.assertEquals(
        signatureVerificationStatusVerifierEpid11.getSignatureVersion(validSignature),
        new byte[] {0, 0, 0, 2});
  }
}
