// Copyright 2021 Intel Corporation
// SPDX-License-Identifier: Apache 2.0

package org.fidoalliance.fdo.epid.verification.services.proof;

import java.util.List;
import lombok.AllArgsConstructor;
import org.fidoalliance.fdo.epid.verification.enums.EpidVersion;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;

@Component
@AllArgsConstructor
public class ServiceBeansFactory {

  private static final String EPID11_CLASS_SUFFIX = "Epid11";
  private static final String EPID20_CLASS_SUFFIX = "Epid20";

  @Autowired private List<RequestVerifierService> requestVerifierServices;

  @Autowired private List<ResponseService> responseServices;

  /**
   * Gets request verifier service, which interfaces with the java class generated by JNI
   * wrapper to perform signature verification.
   * @param epidVersion EPID version
   * @return RequestVerifierService
   */
  @Cacheable(value = "requestVerifierService", cacheManager = "cacheManagerCM")
  public RequestVerifierService getRequestVerifierService(EpidVersion epidVersion) {
    return requestVerifierServices.stream()
        .filter(
            serviceBean ->
                serviceBean
                    .getClass()
                    .getSimpleName()
                    .endsWith(translateEpidVersionToClassSuffix(epidVersion)))
        .reduce(
            (s1, s2) -> {
              throw new ServiceBeanFactoryException(
                  "Multiple definition of RequestVerifierService["
                      + translateEpidVersionToClassSuffix(epidVersion)
                      + "]");
            })
        .orElseThrow(
            () ->
                new ServiceBeanFactoryException(
                    "Not found definition of RequestVerifierService["
                        + translateEpidVersionToClassSuffix(epidVersion)
                        + "]"));
  }

  /**
   * Gets response service, which handles the response of proof request.
   * @param epidVersion EPID version
   * @return ResponseService
   */
  @Cacheable(value = "responseService", cacheManager = "cacheManagerCM")
  public ResponseService getResponseService(EpidVersion epidVersion) {
    return responseServices.stream()
        .filter(
            serviceBean ->
                serviceBean
                    .getClass()
                    .getSimpleName()
                    .endsWith(translateEpidVersionToClassSuffix(epidVersion)))
        .reduce(
            (s1, s2) -> {
              throw new ServiceBeanFactoryException(
                  "Multiple definition of ResponseService["
                      + translateEpidVersionToClassSuffix(epidVersion)
                      + "]");
            })
        .orElseThrow(
            () ->
                new ServiceBeanFactoryException(
                    "Not found definition of ResponseService["
                        + translateEpidVersionToClassSuffix(epidVersion)
                        + "]"));
  }

  /**
   * EPID version string based on enum value.
   * @param epidVersion EPID version
   * @return EPID version name
   */
  public String translateEpidVersionToClassSuffix(EpidVersion epidVersion) {

    switch (epidVersion) {
      case EPID11:
        return EPID11_CLASS_SUFFIX;
      case EPID20:
        return EPID20_CLASS_SUFFIX;
      default:
        throw new IllegalArgumentException("Unknown epid version: " + epidVersion.name());
    }
  }

  public static class ServiceBeanFactoryException extends RuntimeException {
    ServiceBeanFactoryException(String msg) {
      super(msg);
    }
  }
}
